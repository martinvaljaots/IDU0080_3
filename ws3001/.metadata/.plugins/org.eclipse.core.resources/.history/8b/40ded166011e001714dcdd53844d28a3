package ee.ttu.idu0080.raamatupood.client;

import java.math.BigDecimal;
import java.util.List;

import javax.jms.Connection;
import javax.jms.Destination;
import javax.jms.ExceptionListener;
import javax.jms.JMSException;
import javax.jms.Message;
import javax.jms.MessageConsumer;
import javax.jms.MessageListener;
import javax.jms.MessageProducer;
import javax.jms.ObjectMessage;
import javax.jms.Session;
import javax.jms.TextMessage;

import org.apache.activemq.ActiveMQConnection;
import org.apache.activemq.ActiveMQConnectionFactory;
import org.apache.log4j.Logger;

import ee.ttu.idu0080.raamatupood.server.EmbeddedBroker;
import ee.ttu.idu0080.raamatupood.types.TellimuseRida;
import ee.ttu.idu0080.raamatupood.types.Tellimus;

/**
 * JMS sĆµnumite tarbija. Ć�hendub broker-i urlile
 * 
 * @author Allar Tammik
 * @date 08.03.2010
 */
public class Consumer implements MessageListener, ExceptionListener {
	protected static final Logger log = Logger.getLogger(Consumer.class);
	private String SUBJECT = "tellimuse.edastamine";
	private String SUBJECT_ANSWER = "tellimuse.vastus";
	private String user = ActiveMQConnection.DEFAULT_USER;
	private String password = ActiveMQConnection.DEFAULT_PASSWORD;
	private String url = EmbeddedBroker.URL;
	private long timeToLive = 100000;
	
	private MessageProducer producer;
	private Session session;
	//public ObjectMessage objectMessage;

	public static void main(String[] args) {
		Consumer consumerTool = new Consumer();
		consumerTool.run();
	}

	public void run() {
		Connection connection = null;
		try {
			Consumer consumer = new Consumer();
			
			log.info("Connecting to URL: " + url);
			log.info("Consuming queue : " + SUBJECT);
			System.out.println("Consuming queue : " + SUBJECT);
			
			// 1. Loome Ć¼henduse
			ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(user, password, url);
			connection = connectionFactory.createConnection();

			// Kui Ć¼hendus kaob, lĆµpetatakse Consumeri tĆ¶Ć¶ veateatega.
			connection.setExceptionListener(consumer);

			// KĆ¤ivitame Ć¼henduse
			connection.start();

			// 2. Loome sessiooni
			/*
			 * createSession vĆµtab 2 argumenti: 1. kas saame kasutada
			 * transaktsioone 2. automaatne kinnitamine
			 */
			Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);

			// Loome teadete sihtkoha (jĆ¤rjekorra). Parameetriks jĆ¤rjekorra nimi
			Destination destination = session.createQueue(SUBJECT);
			Destination answerDestination = session.createQueue(SUBJECT_ANSWER);

			// 3. Teadete vastuvĆµtja
			MessageConsumer MsgConsumer = session.createConsumer(destination);
			MessageProducer MsgProducer = session.createProducer(answerDestination);

			// Kui teade vastu vĆµetakse kĆ¤ivitatakse onMessage()
			MsgConsumer.setMessageListener(consumer);

		} catch (Exception e) {
			e.printStackTrace();
		} 
	}

	
	private void sendAnswer(String message){
		try{
			TextMessage answer = session.createTextMessage(message);
			log.debug("Sending answer: " + answer.getText());
			msgProducer.send(answer);
		}catch (JMSException e){
			log.warn("Caught: " + e);
			e.printStackTrace();
		}
	}
	
	}

	@Override
	public void onException(JMSException arg0) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void onMessage(Message arg0) {
		// TODO Auto-generated method stub
		
	}	
}